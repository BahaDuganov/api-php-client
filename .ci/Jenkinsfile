#!groovy

import org.csanchez.jenkins.plugins.kubernetes.pipeline.PodTemplateAction
import groovy.transform.Field

String launchUnitTests = "yes"
String launchEndToEndTests = "yes"
String[] supportedPhpVersions = ["5.6", "7.0", "7.1"]
@Field def String verboseOutputs = "yes"
@Field def String dotsPerLine = "50"

def clientConfig = [
    "php-http/guzzle6-adapter": ["phpVersion": supportedPhpVersions, "psrImplem": ["guzzlehttp/psr7"]],
    "php-http/guzzle5-adapter": ["phpVersion": supportedPhpVersions, "psrImplem": ["guzzlehttp/psr7", "zendframework/zend-diactoros", "slim/slim"]],
    "php-http/curl-client": ["phpVersion": supportedPhpVersions, "psrImplem": ["guzzlehttp/psr7", "zendframework/zend-diactoros", "slim/slim"]]
]

imageRepo = "eu.gcr.io/akeneo-ci/php-api-client"
imageTag = "pull-request-${env.CHANGE_ID}-build-${env.BUILD_NUMBER}"
gcrImages = []

def clients = clientConfig.keySet() as String[]
def buildResult= 'SUCCESS'

try {
    stage("Build") {
        milestone 1
        if (env.BRANCH_NAME =~ /^PR-/) {
            userInput = input(message: 'Launch tests?', parameters: [
                choice(choices: 'yes\nno', description: 'Run unit tests and code style checks', name: 'launchUnitTests'),
                choice(choices: 'yes\nno', description: 'Run end-to-end tests', name: 'launchEndToEndTests'),
                choice(choices: 'no\nyes', description: 'Enable Verbose mode', name: 'verboseOutputs'),
                string(defaultValue: '50', description: 'Number of dots per line', name: 'dotsperline'),
                string(defaultValue: clients.join(','), description: 'Clients used to run end-to-end tests (comma separated values)', name: 'clients'),
                string(defaultValue: '50', description: 'Number of dots per line', name: 'dotsperline'),
            ])

            launchUnitTests = userInput['launchUnitTests']
            launchEndToEndTests = userInput['launchEndToEndTests']
            clients = userInput['clients'].tokenize(',')
            verboseOutputs = userInput['verboseOutputs']
            dotsPerLine = userInput['dotsperline']
        }
        milestone 2

        checkouts = [:]

        if (launchUnitTests.equals("yes")) {
            String currentClient = "php-http/guzzle6-adapter"
            String currentPsrImplem = "guzzlehttp/psr7"

            for (phpVersion in clientConfig.get(currentClient).get("phpVersion")) {
                String currentPhpVersion = phpVersion

                checkouts["${currentClient}-${currentPsrImplem}-${currentPhpVersion}"] = {buildClient(currentPhpVersion, currentClient, currentPsrImplem)}
            }
        }

        if (launchEndToEndTests.equals("yes")) {
            for (client in clients) {
                for (phpVersion in clientConfig.get(client).get("phpVersion")) {
                    for (psrImplem in clientConfig.get(client).get("psrImplem")) {
                        String currentClient = client
                        String currentPhpVersion = phpVersion
                        String currentPsrImplem = psrImplem

                        checkouts["${currentClient}-${currentPsrImplem}-${currentPhpVersion}"] = {buildClient(currentPhpVersion, currentClient, currentPsrImplem)}
                    }
                }
            }
        }

        parallel checkouts
    }

    if (launchUnitTests.equals("yes")) {
        stage("Unit tests and Code style") {
            def tasks = [:]

            String currentClient = "php-http/guzzle6-adapter"
            String currentPsrImplem = "guzzlehttp/psr7"

            tasks["php-cs-fixer"] = {runPhpCsFixerTest("7.1", currentClient, currentPsrImplem)}

            for (phpVersion in clientConfig.get(currentClient).get("phpVersion")) {
                String currentPhpVersion = phpVersion

                tasks["phpspec-${phpVersion}"] = {runPhpSpecTest(currentPhpVersion, currentClient, currentPsrImplem)}
            }

            try {
                parallel tasks
            } catch (e) {
                println e
                buildResult = 'FAILURE'
            }
        }
    }

    if (launchEndToEndTests.equals("yes")) {
        stage("EndToEnd tests") {
            def tasks = [:]

            for (client in clients) {
                for (phpVersion in clientConfig.get(client).get("phpVersion")) {
                    for (psrImplem in clientConfig.get(client).get("psrImplem")) {
                        String currentClient = client
                        String currentPsrImplem = psrImplem
                        String currentPhpVersion = phpVersion

                        tasks["phpunit-${currentClient}-${currentPsrImplem}-${currentPhpVersion}"] = {runEndToEndTest(currentPhpVersion, currentClient, currentPsrImplem)}
                    }
                }
            }

            try {
                parallel tasks
            } catch (e) {
                println e
                buildResult = 'FAILURE'
            }
        }
    }
} catch (e) {
    println e
    buildResult = 'FAILURE'
} finally {
    stage("Cleanup") {
        if (gcrImages.size() > 0) {
            withDockerGcloud({
                sh "gcloud -q container images delete " + gcrImages.join(" ")
            })
        } else {
            echo "Nothing to cleanup"
        }
    }

    currentBuild.result = buildResult
}


/**
 * Run checkout of the PHP client, for a given PHP version, HTTP client and PSR7 implementation.
 * Run composer, prepare configuration files and push data to a docker registry image.
 *
 * @param phpVersion PHP version to use to run the composer
 * @param client     Name of the HTTP client package to use to checkout
 * @param psrImplem  Name of the PSR 7 implementation package to checkout
 */
void buildClient(String phpVersion, String client, String psrImplem) {
    withBuildNode(phpVersion,{
        dir("git") {
            checkout scm

            container("php") {
                sh "composer --ansi require ${client} ${psrImplem}"
                sh "composer --ansi update --optimize-autoloader --no-interaction --no-progress --prefer-dist --no-suggest"
            }

            String gcrImageName = getApiClientGCRImageName(phpVersion, client, psrImplem)
            saveDockerData(gcrImageName)

            // Add image to array for cleanup
            gcrImages += "${gcrImageName}"
        }
    })
}

/**
 * Run php cs fixer, for a given PHP version, HTTP client and PSR7 implementation.
 *
 * @param phpVersion PHP version to run the test with
 * @param client     Name of the HTTP client package to run the test with
 * @param psrImplem  Name of the PSR 7 implementation package to run the test with
 */
void runPhpCsFixerTest(String phpVersion, String client, String psrImplem) {
    String phpApiImage = getApiClientGCRImageName(phpVersion, client, psrImplem)

    withPhpApi(phpApiImage, phpVersion, {
        dir("/home/jenkins/php-api-client") {
            try {
                sh "./bin/php-cs-fixer fix --diff --dry-run --config=.php_cs.php --format=junit > junit_output.xml"
            } finally {
                sh """sed -i 's/testcase name="/testcase name="[php-cs-fixer] /' junit_output.xml"""
                junit "junit_output.xml"
            }
        }
    })
}

/**
 * Run PHPspec tests, for a given PHP version, HTTP client and PSR7 implementation.
 *
 * @param phpVersion PHP version to run the test with
 * @param client     Name of the HTTP client package to use to run the test with
 * @param psrImplem  Name of the PSR 7 implementation package to run the test with
 */
void runPhpSpecTest(String phpVersion, String client, String psrImplem) {
    String phpApiImage = getApiClientGCRImageName(phpVersion, client, psrImplem)

    withPhpApi(phpApiImage, phpVersion, {
        dir("/home/jenkins/php-api-client") {
            try {
                sh "./bin/phpspec run --no-interaction --format=junit > junit_output.xml"
            } finally {
                sh """sed -i 's/testcase name="/testcase name="[php-${phpVersion}] /' junit_output.xml"""
                junit "junit_output.xml"
            }
        }
    })
}

/**
 * Run end-to-end tests of the PHP client, for a given PHP version, HTTP client and PSR7 implementation.
 *
 * @param phpVersion PHP version to run the test with
 * @param client     Name of the HTTP client package to use to run the test with
 * @param psrImplem  Name of the PSR 7 implementation package to run the test with
 */
def runEndToEndTest(String phpVersion, String client, String psrImplem) {
    String phpApiImage = getApiClientGCRImageName(phpVersion, client, psrImplem)

    withPhpApi(phpApiImage, phpVersion, {
        dir("/home/jenkins/php-api-client") {
            try {
                sh """sudo php -d error_reporting="E_ALL" ./bin/phpunit -c phpunit.xml.dist --log-junit junit_output.xml"""
            } finally {
                sh """sed -i 's/testcase name="/testcase name="[php-${phpVersion}] /' junit_output.xml"""
                junit "junit_output.xml"
            }
        }
    })
}


/**
 * This function allow you to run Google Cloud commands
 *
 * @param body              Groovy script to execute inside Jenkins node
 *
 * Kubernetes Template :
 * (Default location is set to "/home/jenkins")
 *  - (Run)  docker         : Run Google Cloud commands inside
 *  - (Run)  php            : Run PHP commands inside
 */
def withBuildNode(String phpVersion, body) {
    clearTemplateNames()
    def uuid = UUID.randomUUID().toString()

    withCredentials([string(credentialsId: 'composer-token', variable: 'token')]) {
        podTemplate(name: "php-api-client-node", label: "build-" + uuid, containers: [
            containerTemplate(
                name: "docker",
                image: "paulwoelfel/docker-gcloud",
                ttyEnabled: true,
                command: 'cat',
                envVars: [envVar(key: "DOCKER_API_VERSION", value: "1.23")],
                resourceRequestCpu: '100m', resourceRequestMemory: '200Mi'),
            containerTemplate(
                name: "php",
                image: "akeneo/php:${phpVersion}",
                ttyEnabled: true,
                command: 'cat',
                alwaysPullImage: true,
                envVars: [
                    envVar(key: "COMPOSER_AUTH", value: "{\"github-oauth\":{\"github.com\": \"$token\"}}")],
                resourceRequestCpu: '500m',
                resourceRequestMemory: '1000Mi')
        ], volumes: [
            hostPathVolume(hostPath: "/var/run/docker.sock", mountPath: "/var/run/docker.sock")
        ]) {
            node("build-" + uuid) {
                dir('/home/jenkins') {
                    body()
                }
            }
        }
    }
}

/**
 * This function allow you to run Google Cloud commands
 *
 * @param body              Groovy script to execute inside "docker" container
 *
 * Kubernetes Template :
 *  - (Run)  docker         : Run Google Cloud commands inside
 */
def withDockerGcloud(body) {
    clearTemplateNames()
    def uuid = UUID.randomUUID().toString()

    podTemplate(name: "php-api-client-gcloud", label: "dockergcloud-" + uuid, containers: [
        containerTemplate(
            name: "docker",
            image: "paulwoelfel/docker-gcloud",
            ttyEnabled: true,
            command: 'cat',
            resourceRequestCpu: '100m',
            resourceRequestMemory: '200Mi',
            envVars: [envVar(key: "DOCKER_API_VERSION", value: "1.23")])
    ], volumes: [
        hostPathVolume(hostPath: "/var/run/docker.sock", mountPath: "/var/run/docker.sock")
    ]) {
        node("dockergcloud-" + uuid) {
            container("docker") {
                body()
            }
        }
    }
}

/**
 * This function allow you to run php commands with php-api-client sources
 *
 * @param phpApiImageName   Full GCR image name to pull, containing php-api-client data
 * @param phpVersion        PHP version to run the test with
 * @param body              Groovy script to execute inside "php" container
 *
 * Kubernetes Template :
 *  - (Init) php-api-client : Copy php-api-client sources to /home/jenkins/php-api-client
 *  - (Run)  php            : Run PHP commands inside
 */
def withPhpApi(String phpApiImageName, String phpVersion, body) {
    clearTemplateNames()
    def uuid = UUID.randomUUID().toString()

    podTemplate(name: "php-api-client-php", label: "php-" + uuid, containers: [
        containerTemplate(
            name: "php",
            image: "akeneo/php:${phpVersion}",
            ttyEnabled: true,
            command: 'cat',
            alwaysPullImage: true,
            resourceRequestCpu: '500m',
            resourceRequestMemory: '1000Mi')
    ], annotations: [
        podAnnotation(key: "pod.beta.kubernetes.io/init-containers", value:
        """
        [{
            "name":                 "php-api-client-data",
            "image":                "${phpApiImageName}",
            "imagePullPolicy":      "Always",
            "command": ["sh", "-c", "mkdir -p /home/jenkins/php-api-client && cp -Rp /data/. /home/jenkins/php-api-client"],
            "volumeMounts":[{
                "name":             "workspace-volume",
                "mountPath":        "/home/jenkins"
            }]
        }]
        """)
    ]) {
        node("php-" + uuid) {
            container("php") {
                body()
            }
        }
    }
}

@NonCPS
def clearTemplateNames() {
    // see https://issues.jenkins-ci.org/browse/JENKINS-42184
    currentBuild.rawBuild.getAction( PodTemplateAction.class )?.stack?.clear()
}

/**
 * Save current folder content inside a Docker image and push it to Google Cloud Registry
 *
 * @param gcrName               PHP version to run the test with
 * @param gCloudcontainerName   Container name allowed to build and push images to Google Cloud Registry
 */
def saveDockerData(String gcrName, String gCloudcontainerName = "docker") {
    container(gCloudcontainerName) {
        sh "echo 'FROM alpine:3.6\nADD . /data\n' > Dockerfile"
        sh "docker build -t ${gcrName} ."
        sh "gcloud docker -- push ${gcrName}"
    }
}

/**
 * Give a structured name to tag current php-api-client data into Google Cloud Registry
 *
 * @param phpVersion PHP version to run the test with
 * @param client     name of the HTTP client package to use to run the test with
 * @param psrImplem  name of the PSR 7 implementation package to run the test with
 */
def getApiClientGCRImageName(String phpVersion, String client, String psrImplem) {
    String imageName = "${client}_${psrImplem}_php-${phpVersion}".replaceAll("/", "_")
    return "${imageRepo}/${imageName}:${imageTag}"
}
